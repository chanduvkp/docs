{
    "docs": [
        {
            "location": "/",
            "text": "Request Yo Racks (Now)!\n\u00b6\n\n\nThe city of Austin offers the possibility to apply for the \nfree installation of bike corrals on the right of way/parking spot close to businesses\n. The process requires the requester to write an email to a specific service of the city, and include additional information about the location and the business owner(s).\n\n\nBut there are two problems with this approach:\n\n\n\n\n\n\nThe first problem is that people do not want to spend the time to write the email and collect the necessary information.\n\n\n\n\n\n\nThe second one is that, in spite of the fact that the people in charge of the program are willing to help, the process is not completely straightforward:\n\n\n\n\n\"There will generally be at least a few back and forth messages associated with a bike parking request.\"\n\n\n\n\n\n\n\n\n\u201cRequest yo rack\u201d proposes to simplify the process by automating all these tasks, and reducing the requester efforts to 3 simple steps:\n\n\n\n\nSelect the location on the map\n\n\nReview/Edit the information\n\n\nSubmit",
            "title": "Home"
        },
        {
            "location": "/#request-yo-racks-now",
            "text": "The city of Austin offers the possibility to apply for the  free installation of bike corrals on the right of way/parking spot close to businesses . The process requires the requester to write an email to a specific service of the city, and include additional information about the location and the business owner(s).  But there are two problems with this approach:    The first problem is that people do not want to spend the time to write the email and collect the necessary information.    The second one is that, in spite of the fact that the people in charge of the program are willing to help, the process is not completely straightforward:   \"There will generally be at least a few back and forth messages associated with a bike parking request.\"     \u201cRequest yo rack\u201d proposes to simplify the process by automating all these tasks, and reducing the requester efforts to 3 simple steps:   Select the location on the map  Review/Edit the information  Submit",
            "title": "Request Yo Racks (Now)!"
        },
        {
            "location": "/contributor-zone/adw-2017/",
            "text": "Austin Design Week 2017\n\u00b6\n\n\nAbstract\n\u00b6\n\n\nThe first annual \nAustin Design Week\n took place from November 6th to 10th 2017.\n\n\nRequest Yo Racks was recommended by \nOpen Austin\n and then selected by a few people who decided to work on it. One of them (\u201cJohn\u201d) is an employee of the DoT.\n\n\nFeedback\n\u00b6\n\n\nHere is the feedback I was able to collect thanks to them:\n\n\n\n\nThe idea was \nVERY\n appreciated\n\n\nBicycle Rack Requests\n - This is a list of bicycle racks installed and/or distributed by the City of Austin Bicycle Program (last updated in 2012)\n\n\nA \npresentation\n was made on the very last day.\n\n\n\n\nCity needs\n\u00b6\n\n\nThe app would ideally cover:\n\n\n\n\n\n\nRequests in public property and sites on private property (publicly accessible) \u2013 you should be able to tag if the request is on private or public land)\n\n\n\n\nProgram funds can also support installs on private property that is publicly accessible: \nhttp://www.austintexas.gov/sites/default/files/files/Public_Works/Bike_Rack_Flyer.pdf\n\n\n\n\n\n\n\n\nCrowdsourced input of existing bike parking would be great \u2013 there is not current a data source existing of all existing racks\n\n\n\n\nCapturing a photo of a suggested location\n\n\nFlagging proposed in-street corral locations\n\n\nAllowing and encouraging input of a contact person (e.g. adjacent business owner or property manager to serve as a point of contact)\n\n\nApp could support City or 3rd party bike rack installs \u2013 these entities and the public should be able to note when a requested rack is installed.\n\n\n\n\nUpvoting feature would be great\n\n\n\n\nThis would help indicate where demand for a rack is highest, and possibly prioritize it for installation. It is also important (from the city's perspective) that the app demonstrate how strong the demand is for racks in general, because that makes the case for the existence of the program, so any feature that highlights the need for bike racks is a plus.",
            "title": "Austin Design Week 2017"
        },
        {
            "location": "/contributor-zone/adw-2017/#austin-design-week-2017",
            "text": "",
            "title": "Austin Design Week 2017"
        },
        {
            "location": "/contributor-zone/adw-2017/#abstract",
            "text": "The first annual  Austin Design Week  took place from November 6th to 10th 2017.  Request Yo Racks was recommended by  Open Austin  and then selected by a few people who decided to work on it. One of them (\u201cJohn\u201d) is an employee of the DoT.",
            "title": "Abstract"
        },
        {
            "location": "/contributor-zone/adw-2017/#feedback",
            "text": "Here is the feedback I was able to collect thanks to them:   The idea was  VERY  appreciated  Bicycle Rack Requests  - This is a list of bicycle racks installed and/or distributed by the City of Austin Bicycle Program (last updated in 2012)  A  presentation  was made on the very last day.",
            "title": "Feedback"
        },
        {
            "location": "/contributor-zone/adw-2017/#city-needs",
            "text": "The app would ideally cover:    Requests in public property and sites on private property (publicly accessible) \u2013 you should be able to tag if the request is on private or public land)   Program funds can also support installs on private property that is publicly accessible:  http://www.austintexas.gov/sites/default/files/files/Public_Works/Bike_Rack_Flyer.pdf     Crowdsourced input of existing bike parking would be great \u2013 there is not current a data source existing of all existing racks   Capturing a photo of a suggested location  Flagging proposed in-street corral locations  Allowing and encouraging input of a contact person (e.g. adjacent business owner or property manager to serve as a point of contact)  App could support City or 3rd party bike rack installs \u2013 these entities and the public should be able to note when a requested rack is installed.   Upvoting feature would be great   This would help indicate where demand for a rack is highest, and possibly prioritize it for installation. It is also important (from the city's perspective) that the app demonstrate how strong the demand is for racks in general, because that makes the case for the existence of the program, so any feature that highlights the need for bike racks is a plus.",
            "title": "City needs"
        },
        {
            "location": "/contributor-zone/goals-strategy/",
            "text": "Goals and strategy\n\u00b6",
            "title": "Goals & Strategy"
        },
        {
            "location": "/contributor-zone/goals-strategy/#goals-and-strategy",
            "text": "",
            "title": "Goals and strategy"
        },
        {
            "location": "/contributor-zone/technical-overview/",
            "text": "Technical overview\n\u00b6\n\n\nRequest Yo Racks is a collection of open source projects hosted on Github.\n\n\nKey principles\n\u00b6\n\n\n\n\nEverything must be automated.\n\n\nEverything must be documented.\n\n\nEverything must be containerized.\n\n\n\n\nAPI\n\u00b6\n\n\nThe API is done in \nPython\n, using \n\nDjango REST Framework\n (DRF).\n\n\nThe tasks will be handled by \nCelery\n to process them\nasynchronously.\n\n\nAll the Python documentation is written in \nreStructuredText\n \nand generated with \nSphinx\n.\n\n\nRepository: \nAPI\n\n\nWeb\n\u00b6\n\n\nThe frontend is a \nProgressive Web Application (PWA)\n. \nThe \nPolymer\n library offers the ability to quickly create a PWA implementing the\n\nPRPL pattern\n, and to build \n\nweb components\n.\n\n\nRepository: \nWeb\n\n\nInfrastructure\n\u00b6\n\n\nThe projects are fully containerized using \nDocker\n and will be deployed on a \nKubernetes\n cluster on the \nGCP\n.",
            "title": "Technical Overview"
        },
        {
            "location": "/contributor-zone/technical-overview/#technical-overview",
            "text": "Request Yo Racks is a collection of open source projects hosted on Github.",
            "title": "Technical overview"
        },
        {
            "location": "/contributor-zone/technical-overview/#key-principles",
            "text": "Everything must be automated.  Everything must be documented.  Everything must be containerized.",
            "title": "Key principles"
        },
        {
            "location": "/contributor-zone/technical-overview/#api",
            "text": "The API is done in  Python , using  Django REST Framework  (DRF).  The tasks will be handled by  Celery  to process them\nasynchronously.  All the Python documentation is written in  reStructuredText  \nand generated with  Sphinx .  Repository:  API",
            "title": "API"
        },
        {
            "location": "/contributor-zone/technical-overview/#web",
            "text": "The frontend is a  Progressive Web Application (PWA) . \nThe  Polymer  library offers the ability to quickly create a PWA implementing the PRPL pattern , and to build  web components .  Repository:  Web",
            "title": "Web"
        },
        {
            "location": "/contributor-zone/technical-overview/#infrastructure",
            "text": "The projects are fully containerized using  Docker  and will be deployed on a  Kubernetes  cluster on the  GCP .",
            "title": "Infrastructure"
        },
        {
            "location": "/guides/setup-full-environment/",
            "text": "How to setup a full environment?\n\u00b6\n\n\nPrerequisites\n\u00b6\n\n\n\n\nTips\n\n\nA script in the\n\ninfra\n\nrepository can assist you to install the prerequisites software automatically and configure your Github account\n(\nOS X only\n).\n\n\nTo start the procedure, simply run the following command:\n\nbash <\n(\ncurl -fsSL https://raw.githubusercontent.com/request-yo-racks/infra/master/bootstrap/bootstrap-osx.sh\n)\n\n\n\n\nAt the end of the procedure, your SSH key will be automatically copied to your clipboard and\na web page will pop up with the instructions to help you add it to Github.\n\n\nIf nothing pops up, run \nexport BS_SILENT=0\n, then replay the script.\n\n\n\n\nGithub\n\u00b6\n\n\n\n\nA \nGithub\n account\n\n\nWith an \nSSH key\n\n\nAdded to your \nGithub account\n\n\n\n\n\n\n\n\nSoftware\n\u00b6\n\n\n\n\nHomebrew\n if you are using OSX\n\n\nA terminal. The default one is fine, but \niterm2\n is better\n\n\nVirtualbox\n\n\nDocker\n\n\nNodeJS\n\n\n\n\nAccounts\n\u00b6\n\n\nFirst, you will need:\n\n\n\n\nA \nYelp\n account\n\n\nA \nGoogle\n account\n\n\n\n\nDeveloper keys\n\u00b6\n\n\nCreate a developer Key for:\n\n\n\n\nYelp Fusion API\n\n\nGoogle Places API\n\n\nGoogle Geocoding API\n\n\nGoogle Maps JavaScript API\n\n\n\n\nEnvironment variables\n\u00b6\n\n\n\n\nTips\n\n\nAdd the RYR variables to your \n~/.bash_profile\n to avoid exporting them every time:\n\n# Set RYR variables.\n\n\nexport\n \nRYR_GLOBAL_CONFIG_DIR\n=\n\"\n${\nHOME\n}\n/.config/ryr\"\n\n\nexport\n \nRYR_PROJECT_DIR\n=\n\"\n${\nHOME\n}\n/projects/request-yo-racks\"\n\n\n\n\n\n\nOnce your accounts are setup, store your developer keys in a global environment file. This file should be located in\n\n~/.config/ryr\n, which is your configuration directory for the request-yo-racks project.\n\n\nExport the location of the configuration directory to an environment variable:\n\nexport\n \nRYR_GLOBAL_CONFIG_DIR\n=\n\"\n${\nHOME\n}\n/.config/ryr\"\n\n\n\n\nThen create the \nryr-env.sh\n script:\n\nmkdir -p \n\"\n${\nRYR_GLOBAL_CONFIG_DIR\n}\n\"\n\ncat \n<< EOF > \"${RYR_GLOBAL_CONFIG_DIR}/ryr-env.sh\"\n\n\nexport RYR_COLLECTOR_YELP_CLIENT_ID=foo\n\n\nexport RYR_COLLECTOR_YELP_CLIENT_SECRET=foo\n\n\nexport RYR_COLLECTOR_GOOGLE_PLACES_API_KEY=foo\n\n\nexport RYR_COLLECTOR_GOOGLE_GEOCODING_API_KEY=foo\n\n\nexport RYR_WEB_GOOGLE_MAPS_API_KEY=foo\n\n\nexport API_BASE_URL=http://api.192.168.99.100.nip.io/\n\n\nEOF\n\nchmod \n400\n \n\"\n${\nRYR_GLOBAL_CONFIG_DIR\n}\n/ryr-env.sh\"\n\n\n\n\nFor creating Kubernetes secrets, you need to create one file per key in the\n\n~/.config/ryr/kubernetes-secrets\n folder:\n\n\nmkdir -p \n\"\n${\nRYR_GLOBAL_CONFIG_DIR\n}\n/kubernetes-secrets\"\n\n\ncd\n \n\"\n${\nRYR_GLOBAL_CONFIG_DIR\n}\n/kubernetes-secrets\"\n\n\necho\n \n\"foo\"\n > RYR_COLLECTOR_YELP_CLIENT_ID\n\necho\n \n\"foo\"\n > RYR_COLLECTOR_YELP_CLIENT_SECRET\n\necho\n \n\"foo\"\n > RYR_COLLECTOR_GOOGLE_PLACES_API_KEY\n\necho\n \n\"foo\"\n > RYR_COLLECTOR_GOOGLE_GEOCODING_API_KEY\n\necho\n \n\"foo\"\n > RYR_WEB_GOOGLE_MAPS_API_KEY\n\n\n\n\nAt the end of the process, your \n~/.config/ryr\n folder should look like this:\n\n[\n~/.config/ryr\n]\n $ tree -L \n2\n\n.\n\u251c\u2500\u2500 kubernetes-secrets\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 RYR_COLLECTOR_GOOGLE_GEOCODING_API_KEY\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 RYR_COLLECTOR_GOOGLE_PLACES_API_KEY\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 RYR_COLLECTOR_YELP_CLIENT_ID\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 RYR_COLLECTOR_YELP_CLIENT_SECRET\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 RYR_WEB_GOOGLE_MAPS_API_KEY\n\u2514\u2500\u2500 ryr-env.sh\n\n\n\nFork the projects\n\u00b6\n\n\nGo to the \nRequest Yo Racks\n organization on Github and\n\nfork\n the \ninfra\n, \napi\n, and \nweb\n projects (the \ncharts\n and \ndocs\n projects are optional as they are no required to run RYR).\n\n\nClone or update the projects\n\u00b6\n\n\nConfigure a folder which will contain the RYR projects:\n\nexport\n \nRYR_PROJECT_DIR\n=\n\"\n${\nHOME\n}\n/projects/request-yo-racks\"\n\n\n\n\nConfigure your Github user:\n\nexport\n \nGH_USER\n=\n<your_github_user_name>\n\n\n\nClone or update the projects (the \ncharts\n and \ndocs\n projects are optional as they are no required to run RYR):\n\nmkdir -p \n\"\n${\nRYR_PROJECT_DIR\n}\n\"\n\n\ncd\n \n\"\n${\nRYR_PROJECT_DIR\n}\n\"\n\n\nfor\n project in api charts docs infra web\n;\n \ndo\n\n  git clone git@github.com:\n${\nGH_USER\n}\n/\n${\nproject\n}\n.git \n2\n> /dev/null \n||\n git -C \n${\nproject\n}\n/ pull upstream master\n;\n\n  git  -C \n${\nproject\n}\n remote add upstream git@github.com:request-yo-racks/\n${\nproject\n}\n.git \n2\n> /dev/null\n;\n\n\ndone\n\n\n\n\nEach project is provided with a \nMakefile\n and can be simply setup with the \nmake\n command.\n\n\nStart the services\n\u00b6\n\n\nExternal services\n\u00b6\n\n\nThis will spin up \nminikube\n and setup the external services that are required by RYR, like \npostgresql\n, \nredis\n,\n\nrabbitmq\n.\n\n\ncd\n \n\"\n${\nRYR_PROJECT_DIR\n}\n/infra/kubernetes\"\n\nmake provision configure\n\n\n\n\nAPI\n\u00b6\n\n\neval\n \n$(\nminikube docker-env\n)\n\n\ncd\n \n\"\n${\nRYR_PROJECT_DIR\n}\n/api\"\n\nmake build-docker deploy-minikube\n\n\n\n\nTest your setup from a terminal:\n\ncurl -i http://api.192.168.99.100.nip.io/places/30.318673580117846,-97.72446155548096\n\n\nOr browse it:\n\nopen http://api.192.168.99.100.nip.io/places/30.318673580117846,-97.72446155548096\n\n\n\nWeb\n\u00b6\n\n\n\n\nNotes\n\n\nYour Google Maps API key will automatically be pulled from the environment variables into the \nsrc/config-dev.js\n\nfile by the \nMakefile\n. See the \ninit-config\n target for more details.\n\n\n\n\neval\n \n$(\nminikube docker-env\n)\n\n\ncd\n \n\"\n${\nRYR_PROJECT_DIR\n}\n/web\"\n\n\nSUFFIX\n=\n.dev make build-docker deploy-minikube\n\n\n\n\nCheck the web application:\n\nopen http://www.192.168.99.100.nip.io/",
            "title": "Setup full environment"
        },
        {
            "location": "/guides/setup-full-environment/#how-to-setup-a-full-environment",
            "text": "",
            "title": "How to setup a full environment?"
        },
        {
            "location": "/guides/setup-full-environment/#prerequisites",
            "text": "Tips  A script in the infra \nrepository can assist you to install the prerequisites software automatically and configure your Github account\n( OS X only ).  To start the procedure, simply run the following command: bash < ( curl -fsSL https://raw.githubusercontent.com/request-yo-racks/infra/master/bootstrap/bootstrap-osx.sh )   At the end of the procedure, your SSH key will be automatically copied to your clipboard and\na web page will pop up with the instructions to help you add it to Github.  If nothing pops up, run  export BS_SILENT=0 , then replay the script.",
            "title": "Prerequisites"
        },
        {
            "location": "/guides/setup-full-environment/#github",
            "text": "A  Github  account  With an  SSH key  Added to your  Github account",
            "title": "Github"
        },
        {
            "location": "/guides/setup-full-environment/#software",
            "text": "Homebrew  if you are using OSX  A terminal. The default one is fine, but  iterm2  is better  Virtualbox  Docker  NodeJS",
            "title": "Software"
        },
        {
            "location": "/guides/setup-full-environment/#accounts",
            "text": "First, you will need:   A  Yelp  account  A  Google  account",
            "title": "Accounts"
        },
        {
            "location": "/guides/setup-full-environment/#developer-keys",
            "text": "Create a developer Key for:   Yelp Fusion API  Google Places API  Google Geocoding API  Google Maps JavaScript API",
            "title": "Developer keys"
        },
        {
            "location": "/guides/setup-full-environment/#environment-variables",
            "text": "Tips  Add the RYR variables to your  ~/.bash_profile  to avoid exporting them every time: # Set RYR variables.  export   RYR_GLOBAL_CONFIG_DIR = \" ${ HOME } /.config/ryr\"  export   RYR_PROJECT_DIR = \" ${ HOME } /projects/request-yo-racks\"    Once your accounts are setup, store your developer keys in a global environment file. This file should be located in ~/.config/ryr , which is your configuration directory for the request-yo-racks project.  Export the location of the configuration directory to an environment variable: export   RYR_GLOBAL_CONFIG_DIR = \" ${ HOME } /.config/ryr\"   Then create the  ryr-env.sh  script: mkdir -p  \" ${ RYR_GLOBAL_CONFIG_DIR } \" \ncat  << EOF > \"${RYR_GLOBAL_CONFIG_DIR}/ryr-env.sh\"  export RYR_COLLECTOR_YELP_CLIENT_ID=foo  export RYR_COLLECTOR_YELP_CLIENT_SECRET=foo  export RYR_COLLECTOR_GOOGLE_PLACES_API_KEY=foo  export RYR_COLLECTOR_GOOGLE_GEOCODING_API_KEY=foo  export RYR_WEB_GOOGLE_MAPS_API_KEY=foo  export API_BASE_URL=http://api.192.168.99.100.nip.io/  EOF \nchmod  400   \" ${ RYR_GLOBAL_CONFIG_DIR } /ryr-env.sh\"   For creating Kubernetes secrets, you need to create one file per key in the ~/.config/ryr/kubernetes-secrets  folder:  mkdir -p  \" ${ RYR_GLOBAL_CONFIG_DIR } /kubernetes-secrets\"  cd   \" ${ RYR_GLOBAL_CONFIG_DIR } /kubernetes-secrets\"  echo   \"foo\"  > RYR_COLLECTOR_YELP_CLIENT_ID echo   \"foo\"  > RYR_COLLECTOR_YELP_CLIENT_SECRET echo   \"foo\"  > RYR_COLLECTOR_GOOGLE_PLACES_API_KEY echo   \"foo\"  > RYR_COLLECTOR_GOOGLE_GEOCODING_API_KEY echo   \"foo\"  > RYR_WEB_GOOGLE_MAPS_API_KEY  At the end of the process, your  ~/.config/ryr  folder should look like this: [ ~/.config/ryr ]  $ tree -L  2 \n.\n\u251c\u2500\u2500 kubernetes-secrets\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 RYR_COLLECTOR_GOOGLE_GEOCODING_API_KEY\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 RYR_COLLECTOR_GOOGLE_PLACES_API_KEY\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 RYR_COLLECTOR_YELP_CLIENT_ID\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 RYR_COLLECTOR_YELP_CLIENT_SECRET\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 RYR_WEB_GOOGLE_MAPS_API_KEY\n\u2514\u2500\u2500 ryr-env.sh",
            "title": "Environment variables"
        },
        {
            "location": "/guides/setup-full-environment/#fork-the-projects",
            "text": "Go to the  Request Yo Racks  organization on Github and fork  the  infra ,  api , and  web  projects (the  charts  and  docs  projects are optional as they are no required to run RYR).",
            "title": "Fork the projects"
        },
        {
            "location": "/guides/setup-full-environment/#clone-or-update-the-projects",
            "text": "Configure a folder which will contain the RYR projects: export   RYR_PROJECT_DIR = \" ${ HOME } /projects/request-yo-racks\"   Configure your Github user: export   GH_USER = <your_github_user_name>  Clone or update the projects (the  charts  and  docs  projects are optional as they are no required to run RYR): mkdir -p  \" ${ RYR_PROJECT_DIR } \"  cd   \" ${ RYR_PROJECT_DIR } \"  for  project in api charts docs infra web ;   do \n  git clone git@github.com: ${ GH_USER } / ${ project } .git  2 > /dev/null  ||  git -C  ${ project } / pull upstream master ; \n  git  -C  ${ project }  remote add upstream git@github.com:request-yo-racks/ ${ project } .git  2 > /dev/null ;  done   Each project is provided with a  Makefile  and can be simply setup with the  make  command.",
            "title": "Clone or update the projects"
        },
        {
            "location": "/guides/setup-full-environment/#start-the-services",
            "text": "",
            "title": "Start the services"
        },
        {
            "location": "/guides/setup-full-environment/#external-services",
            "text": "This will spin up  minikube  and setup the external services that are required by RYR, like  postgresql ,  redis , rabbitmq .  cd   \" ${ RYR_PROJECT_DIR } /infra/kubernetes\" \nmake provision configure",
            "title": "External services"
        },
        {
            "location": "/guides/setup-full-environment/#api",
            "text": "eval   $( minikube docker-env )  cd   \" ${ RYR_PROJECT_DIR } /api\" \nmake build-docker deploy-minikube  Test your setup from a terminal: curl -i http://api.192.168.99.100.nip.io/places/30.318673580117846,-97.72446155548096 \nOr browse it: open http://api.192.168.99.100.nip.io/places/30.318673580117846,-97.72446155548096",
            "title": "API"
        },
        {
            "location": "/guides/setup-full-environment/#web",
            "text": "Notes  Your Google Maps API key will automatically be pulled from the environment variables into the  src/config-dev.js \nfile by the  Makefile . See the  init-config  target for more details.   eval   $( minikube docker-env )  cd   \" ${ RYR_PROJECT_DIR } /web\"  SUFFIX = .dev make build-docker deploy-minikube  Check the web application: open http://www.192.168.99.100.nip.io/",
            "title": "Web"
        },
        {
            "location": "/about/license/",
            "text": "License\n\u00b6\n\n\n\"Request Yo Racks\" is a collection of open source projects licensed under \nThe MIT License\n.",
            "title": "License"
        },
        {
            "location": "/about/license/#license",
            "text": "\"Request Yo Racks\" is a collection of open source projects licensed under  The MIT License .",
            "title": "License"
        }
    ]
}